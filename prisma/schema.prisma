// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Client {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  phoneNumber  String        @db.VarChar(15)
  email        String        @unique
  appointments Appointment[]

  @@map("Clients")
}

model Trainer {
  id                 Int           @id @default(autoincrement())
  firstName          String
  lastName           String
  phoneNumber        String        @db.VarChar(15)
  trainerDescription String
  trainerImage       String        @db.LongText
  days               String        @db.VarChar(30)
  appointments       Appointment[]

  @@map("Trainers")
}

model Abonement {
  id                   Int           @id @default(autoincrement())
  abonementName        String
  abonementDescription String
  duration             Int
  sessionsCount        Int           @db.SmallInt
  price                Float
  trainerIncluded      Boolean
  appointments         Appointment[]

  @@map("Abonements")
}

model Appointment {
  id          Int  @id @default(autoincrement())
  clientId    Int
  abonementId Int
  trainerId   Int?

  client    Client    @relation(fields: [clientId], references: [id])
  abonement Abonement @relation(fields: [abonementId], references: [id])
  trainer   Trainer?  @relation(fields: [trainerId], references: [id])

  @@index([clientId])
  @@index([abonementId])
  @@index([trainerId])
  @@map("Appointments")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
